/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  EventEmitter,
} from '@stencil/core';

declare global {

  namespace StencilComponents {
    interface FetchHelper {
      'selector': string;
    }
  }

  interface HTMLFetchHelperElement extends StencilComponents.FetchHelper, HTMLStencilElement {}

  var HTMLFetchHelperElement: {
    prototype: HTMLFetchHelperElement;
    new (): HTMLFetchHelperElement;
  };
  interface HTMLElementTagNameMap {
    'fetch-helper': HTMLFetchHelperElement;
  }
  interface ElementTagNameMap {
    'fetch-helper': HTMLFetchHelperElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'fetch-helper': JSXElements.FetchHelperAttributes;
    }
  }
  namespace JSXElements {
    export interface FetchHelperAttributes extends HTMLAttributes {
      'selector'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface VirtualScroll {
      'bottomOffset': number;
      'clear': () => void;
      'forceUpdateComponent': () => void;
      'list': Array<any>;
      'refresh': () => void;
      'scrollToNode': (index: number, speed: number, offset?: number) => void;
      'selector': string;
      'setInfinateFinally': () => void;
      'setInfinateOn': () => void;
      'virtualRatio': number;
    }
  }

  interface HTMLVirtualScrollElement extends StencilComponents.VirtualScroll, HTMLStencilElement {}

  var HTMLVirtualScrollElement: {
    prototype: HTMLVirtualScrollElement;
    new (): HTMLVirtualScrollElement;
  };
  interface HTMLElementTagNameMap {
    'virtual-scroll': HTMLVirtualScrollElement;
  }
  interface ElementTagNameMap {
    'virtual-scroll': HTMLVirtualScrollElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'virtual-scroll': JSXElements.VirtualScrollAttributes;
    }
  }
  namespace JSXElements {
    export interface VirtualScrollAttributes extends HTMLAttributes {
      'bottomOffset'?: number;
      'list'?: Array<any>;
      'onToBottom'?: (event: CustomEvent<number>) => void;
      'onUpdate'?: (event: CustomEvent<Array<any>>) => void;
      'selector'?: string;
      'virtualRatio'?: number;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;